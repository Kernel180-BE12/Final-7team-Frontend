name: Frontend (React) CI/CD to AWS ECR

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ dev ]

env:
  REGION: ap-northeast-2
  REGISTRY: ${{ secrets.ECR_REGISTRY }} # 예) 123456789012.dkr.ecr.ap-northeast-2.amazonaws.com
  REPO: final-7team-front-react        # ECR 리포 이름
  TAG: ${{ github.sha }}               # SHA 태그도 함께 푸시(옵션)

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # AWS & ECR 로그인
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Docker 이미지 빌드 & 푸시
      # (Dockerfile은 레포 루트에 있다고 가정. 위치 다르면 -f ./경로/Dockerfile 지정)
      - name: Build & Push (SHA + latest)
        run: |
          docker build -t "$REGISTRY/$REPO:${TAG}" .
          docker push  "$REGISTRY/$REPO:${TAG}"
          docker tag   "$REGISTRY/$REPO:${TAG}" "$REGISTRY/$REPO:latest"
          docker push  "$REGISTRY/$REPO:latest"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'   # main에만 배포
    steps:
      - name: SSH deploy (front-react만 교체)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}   # 보통 ec2-user
          key:      ${{ secrets.EC2_KEY }}
          script: |
            set -euo pipefail
            cd /home/ec2-user/softlabs   # <- 경로 주의: ec2-user (uesr 아님)
            test -f compose.yml || test -f docker-compose.yml

            # EC2 인스턴스 프로필(IAM Role) 있는 상태 가정
            aws ecr get-login-password --region "${{ env.REGION }}" \
              | docker login --username AWS --password-stdin "${{ env.REGISTRY }}"

            docker compose pull front-react
            docker compose up -d --no-deps front-react
            docker image prune -f
